distinct()
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
distinct() %>%
arrange(desc(tf_idf))
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
distinct()
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word)
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word) %>%
ungroup()
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup()
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf))
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf)) %>%
filter(row_number() <= 10)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf)) %>%
filter(row_number() <= 10)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf))
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf)) %>%
filter(row_number() <= 10)
worst_words %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(App) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(desc(tf_idf)) %>%
filter(row_number() <= 10)
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf)) %>%
filter(row_number() <= 10)
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf))
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(App, desc(tf_idf))
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
arrange(desc(tf_idf), App)
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE)
View(worst_words)
worst_words %>% group_by(App) %>% arrange(desc(tf_idf))
worst_words %>% arrange(App, desc(tf_idf))
View(worst_words %>% arrange(App, desc(tf_idf)))
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf))
View(worst_words)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
View(worst_words)
worst_words %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(App) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
worst_words %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
worst_words %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
top10_worst_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(score_sum) %>%
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
top10_worst_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(score_sum)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
View(worst_words)
top10_worst_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(score_sum) %>%
filter(row_number() <= 10)
top10_worst_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(score_sum) %>%
filter(row_number() <= 5)
worst_words <- top10_worst_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
worst_words %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
worst_words %>%
ggplot(aes(word, desc(tf_idf), fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
?rev
worst_words %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
worst_words %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
worst_words %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = "word", y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
top10_best_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(desc(score_sum)) %>%
filter(row_number() <= 5)
View(top10_best_reviews)
best_words <- top10_best_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
best_words %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = "word", y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
top10_best_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(desc(score_sum)) %>%
filter(row_number() <= 10)
best_words <- top10_best_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
top10_best_reviews <- afinn %>%
filter(App %in% top10_apps_reviews$App) %>%
group_by(App) %>%
arrange(desc(score_sum)) %>%
filter(row_number() <= 10)
best_words <- top10_best_reviews %>%
inner_join(tidy_reviews %>% mutate(App = NULL)) %>%
inner_join(app_categories) %>%
inner_join(tfidf_words, by=c("word", "Category")) %>%
group_by(App) %>%
distinct(word, .keep_all = TRUE) %>%
ungroup() %>%
arrange(App, desc(tf_idf)) %>%
group_by(App) %>%
filter(row_number() <= 10)
best_words %>%
ggplot(aes(word, tf_idf, fill = App)) +
geom_col(show.legend = FALSE) +
labs(x = "word", y = "tf-idf") +
facet_wrap(~App, ncol = 2, scales = "free") +
coord_flip()
unlink('D:/MADM/Mineria de Datos y Textos/play_store_task_1/task_1_cache', recursive = TRUE)
unlink('D:/MADM/Mineria de Datos y Textos/play_store_task_1/task_1_cache', recursive = TRUE)
knitr::kable(head(reviews_sentiments))
unlink('D:/MADM/Mineria de Datos y Textos/play_store_task_1/task_1_cache', recursive = TRUE)
library(wordcloud)
install.packages("wordcloud")
library(reshape2)
install.packages("reshape2")
library(wordcloud)
library(reshape2)
?acast
View(best_words)
best_words %>%
with(wordcloud(word, n, max.words = 100))
best_words %>%
group_by(word) %>%
with(wordcloud(word, n, max.words = 100))
best_words %>%
group_by(word) %>%
top_n(1) %>%
with(wordcloud(word, n, max.words = 100))
best_words %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
best_words %>%
with(wordcloud(word, n, max.words = 100))
best_words %>%
arrange(word, n)
best_words %>%
arrange(word, desc(n))
unlink('D:/MADM/Mineria de Datos y Textos/play_store_task_1/task_1_cache', recursive = TRUE)
setwd('d:/MADM/Aplicacion de Mineria de Dades y tex industria del turisme/task1_mining_barcelona/')
#Definici?n del directorio de trabajo
setwd('d:/MADM/Aplicacion de Mineria de Dades y tex industria del turisme/task1_mining_barcelona/')
setwd('d:/MADM/Aplicacion de Mineria de Dades y tex industria del turisme/task1_mining_barcelona/')
r
versiomn
version
#Librerias que ser?n utilizadas
library(stringr)       #Paquete para manipular la data
library(dplyr)         #Paquete para manipular datos
library(caTools)       #Paquete para subdividir la muestra
library(rpart)         #Paquete para el an?lisis de ?rboles"
library(rpart.plot)    #Paquete para el an?lisis de ?rboles"
library(randomForest)  #Paquete para el an?lisis de random forests"
library(mice)          #Contiene funciones para imputar valores perdidos
library(caret)         #Para calcular indicadores tales como R cuadrado
library(modelr)        #Provee funciones de ayuda para calcular estadisticos relacionados con modelos de regresion
library(broom)         #Crea data frame para mostrar estadisticos
library(ggplot2)       #Contine funciones para la visualizaci?n de datos en mapas
install.packages(c("arules", "caTools", "ggforce", "gower", "knitr", "mice", "ordinal", "RcppArmadillo"))
#Para usar los mapas de Google, necesitamos cargar la siguiente libreria, y luego instalar la versi?n de ggmap desde GitHub
library(devtools)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
library(ggmap)
?register_google
#Guardando la Api key de Google
register_google(key = "AIzaSyDBv1ye2NGm-83W4F6kXluSium5mQkLk_c")
#Verificamos que la clave se ha guardado correctamente
has_google_key()
#Cargamos los datos para el an?lisis
mll_data = read.csv("listings.csv", stringsAsFactors = TRUE, header = TRUE, sep=",", encoding="UTF-8")
#Cargamos los datos para el an?lisis
mll_data = read.csv("listings.csv", stringsAsFactors = TRUE, header = TRUE, sep = ",", encoding = "UTF-8")
View(mll_data)
mll_data$neighbourhood_cleansed
#Quitamos espacios en blancos que puedan estar al incio y final de variables
str_trim(mll_data$neighbourhood_cleansed, side=c("both"))
#Quitamos espacios en blancos que puedan estar al incio y final de variables
str_trim(mll_data$neighbourhood_cleansed, side=c("both"))
?str_trim
#Librerias que ser?n utilizadas
library(stringr)       #Paquete para manipular la data
#Quitamos espacios en blancos que puedan estar al incio y final de variables
str_trim(mll_data$neighbourhood_cleansed, side=c("both"))
#Remover el simbolo del d?lar de la variable precio
mll_data$price=as.numeric(gsub("\\$","",mll_data$price))
#Remover el simbolo del d?lar de la variable precio
mll_data$price=as.numeric(gsub("\\$","",mll_data$price))
#Verificamos que la variable precios sea numerica
typeof(mll_data$price)
View(mll_data)
#Definiremos los datos que queremos representar en el mapa: La densidad de las propiedades en Airbnb
pm_data = mll_data[(mll_data$neighbourhood_cleansed=="el Raval"), ]
#Primero, obtenemos en mapa de Palma
MapStamen = qmap("barcelona", source = "stamen", zoom = 14, color = "bw")
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapStamen + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.1)
?qmap
#Primero, obtenemos en mapa de Palma
MapStamen = qmap("palma de mallorca", source = "stamen", zoom = 14, color = "bw")
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapStamen + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.1)
#Primero, obtenemos en mapa de Palma
MapStamen = qmap("cataluña", source = "stamen", zoom = 14, color = "bw")
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapStamen + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.1)
#Primero, obtenemos en mapa de Palma
MapStamen = qmap("barcelona", source = "stamen", zoom = 14, color = "bw")
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapStamen + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.1)
#Otra opci?n es usar Google. Generemos un mapa de Palma usando Google Maps
MapGoogle=ggmap(
ggmap = get_map(
"Barcelona",
zoom = 14, scale = "auto",
maptype = "terrain",
source = "google"),
extent = "device",
legend = "topright"
)
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapGoogle + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.25)
#Otra opci?n es usar Google. Generemos un mapa de Palma usando Google Maps
MapGoogle=ggmap(
ggmap = get_map(
"Barcelona",
zoom = 10, scale = "auto",
maptype = "terrain",
source = "google"),
extent = "device",
legend = "topright"
)
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapGoogle + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.25)
#Otra opci?n es usar Google. Generemos un mapa de Palma usando Google Maps
MapGoogle=ggmap(
ggmap = get_map(
"Barcelona",
zoom = 11, scale = "auto",
maptype = "terrain",
source = "google"),
extent = "device",
legend = "topright"
)
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapGoogle + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.25)
#Otra opci?n es usar Google. Generemos un mapa de Palma usando Google Maps
MapGoogle=ggmap(
ggmap = get_map(
"Barcelona",
zoom = 12, scale = "auto",
maptype = "terrain",
source = "google"),
extent = "device",
legend = "topright"
)
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapGoogle + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.25)
#Otra opci?n es usar Google. Generemos un mapa de Palma usando Google Maps
MapGoogle=ggmap(
ggmap = get_map(
"Barcelona",
zoom = 13, scale = "auto",
maptype = "terrain",
source = "google"),
extent = "device",
legend = "topright"
)
#Ubiquemos la informaci?n de la ubicaci?n de las propiedades en el mapa
MapGoogle + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 2, alpha = 0.25)
#Podemos representar la informaci?n distinguiendo atributos de las propiedades: Por ejemplo, tipo de propiedad
MapStamen + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 1, alpha = 1) +
facet_wrap(~room_type)
MapGoogle + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "blue", size = 1, alpha = 1) +
facet_wrap(~room_type)
#Otra opci?n es usar Google. Generemos un mapa de Palma usando Google Maps
MapGoogle=ggmap(
ggmap = get_map(
"Barcelona",
zoom = 14, scale = "auto",
maptype = "terrain",
source = "google"),
extent = "device",
legend = "topright"
)
#Fijamos un indicador que muestre el precio
pm_circle_size = 0.010
#Creemos un mapa que muestre las zonas de Palma y las intensidades, seg?n el precio
MapStamen + geom_point(data = pm_data, aes(x = longitude, y = latitude), colour = "red", size = pm_data$price*pm_circle_size, alpha = 0.5)
#Examinamos la variable precios
hist(mll_data$price)
mean(mll_data$price, na.rm = TRUE)
#El precio puede diferir dependiendo de la localidad. Podemos verificarlo a continuaci?n
tapply(mll_data$price, mll_data$neighbourhood_cleansed, mean, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd('d:/MADM/Aplicacion de Mineria de Dades y tex industria del turisme/task1_mining_barcelona/')
register_google(key = Sys.getenv("GOOGLE_MAPS_KEY"))
has_google_key()
Sys.getenv("GOOGLE_MAPS_KEY")
